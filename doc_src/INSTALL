************
** Nuklei **
************

Quickstart:
-----------

apt-get install cmake gcc g++ make pkg-config python imagemagick \
  libgsl0-dev libjpeg62-dev libpng12-dev \
  libcv-dev libcvaux-dev libhighgui-dev \
  libboost-dev libboost-graph-dev libboost-thread-dev \
  libboost-iostreams-dev libboost-serialization-dev \
  libcgal-dev

At FeatureHierarchies/Implementation/trunk, type

  make INSTALL_PREFIX=/usr/local install


Requirements:
-------------

GSL (v1.8+)       http://www.gnu.org/software/gsl/

Boost (v1.35+)    http://www.boost.org/
                  The Nuklei code still contains stubs that facilitate building
                  with 1.34. If you're willing to take a look at the code, it
                  shouldn't be too difficult to compile with 1.34.
                  If you don't want to mess with the code, you should use 1.35+.
                  Tested: 1.35+ (1.35 tested on 2010-04-12)
                  Suggested: 1.40+
                  Note that, although Nuklei compiles with 1.35, the programs in
                  trunk/modules (e.g. se3plotter) require newer
                  Boost versions -- probably 1.38+.

CGAL (v3.3+)      http://www.cgal.org/
                  Tested: 3.3.1 to 3.5

OpenCV (v1.0.0+)  http://opencvlibrary.sourceforge.net/

If you're using a Linux distribution, all of these are
probably available from your package manager.

Boost library names aren't reliable. For example, for the thread
library, one may find

  libboost_thread.so
  libboost_thread-mt.so
  libboost_thread-gcc41-mt.so

depending on which install/distribution one is using. The library name
format may be specified to SCons through the boost_format
argument. Here, "library name" does not include the system library
prefix or suffix.  This argument defaults to "%s", which will search
for Boost libraries named, e.g., under Linux, libboost_thread.so". If
your boost libraries are named, e.g., "libboost_thread-gcc41-mt.so",
set this argument to "%s-gcc41-mt":

  ./scons.py boost_format=%s-gcc41-mt

When Boost is compiled from source, it installs headers in
$INCPATH/boost_X_XX/boost. A symlink `boost -> boost_X_XX/boost'
should be created in $INCPATH.

CGAL uses Boost, and it is a good idea to use the same Boost version
in CGAL and Nuklei, so one should also compile CGAL if Boost is
compiled. Both libraries are trivial to compile and install.

All libraries are expected to be installed in standard locations. If
not, make use of the variables CPPFLAGS and LDFLAGS to reference their
install path in your environment. For instance, if your
GSL is installed under /sw, and your shell is bash, do

  export CPPFLAGS="-I/sw/include $CPPFLAGS"
  export LDFLAGS="-L/sw/lib $LDFLAGS"


Additionally, the install procedure uses standard tools like GNUmake,
python, pkg-config, bash, etc. These should be present if you have a
"development suite" installed.


Installation:
-------------

At the trunk/Hierarchies3D/ level, simply type
  ./scons.py install

If you wish to do a debug build and install it under ~/usr, type
  ./scons.py prefix=/home/$USER/usr bt=develop install

More info:

  - Typing `./scons.py' will only make a local build, with development
    flags.

  - The prefix is cached, the default prefix is /usr/local.

  - Build types are bt=develop bt=deploy bt=profile.

If you get an error looking like

   scons: *** Target `$HdrInstallDir' of
   Install() is a file, but should be a directory.  Perhaps you have
   the Install() arguments backwards?

then your install directory is probably not writable. Check the prefix=
argument.


Notes:
------

The only supported compiler is GCC 4.
