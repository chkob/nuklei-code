Nuklei Doc

The code is organized in subdirectories:

"Base" contains utilities shared throughout the whole library.

"Kernel" contains the code that implements KDE. KernelCollection is
the class that implements PDFs.

"Observation" contains code for reading and writing different types of
observations.

The following directories:

Clustering Grasping Hierarchy Inference Learning PoseEstimation

are self-explanatory, except for "Learning": this one contains code
for learning the visual model. Grasp learning code is in "Grasping".

"Products" contains applications.

Concerning the ACCV paper:

Pose estimation is done as follows:

1. Compute surface normals:

$ nuklei conv --make_r3xs2p file1 file2

(follow the exec thread to see how normals are computed)

2. Identify yourself the kernel bandwidth (look at the data, test
several values..).

Let LDEV and ODEV be the position and orientation bandwidths.

2. Do pose estimation:

$ export NUKLEI_OBSERVATION_LOCATION_STDEV=LDEV
$ export NUKLEI_OBSERVATION_ORIENTATION_STDEV=ODEV
$ export NUKLEI_MCMC_NBP=1
$ export NUKLEI_MCMC_NBP_N_CHAINS=1
$ export NUKLEI_LOG_LEVEL=10
$ export NUKLEI_RANDOM_SEED=-1
$ mdfh_util pe model scene -n 400

Pose estimation provides you with the ML transform from the model to the data.
Try to apply the transform to the model to see if things have worked correctly.

To understand how pose estimation works, follow the exec flow of:

$ export NUKLEI_OBSERVATION_LOCATION_STDEV=LDEV
$ export NUKLEI_OBSERVATION_ORIENTATION_STDEV=ODEV
$ export NUKLEI_LOG_LEVEL=10
$ export NUKLEI_RANDOM_SEED=-1
$ mdfh_util dpe model scene -n 400



More details on the implementation:

The kernels are implemented in "Kernel.h"

Density evaluation is implemented in KernelCollection::evaluationAt

The convolution of Eq. 4 is implemented in Convolution.h (see
dumb_pose_estimation for an example)

MCMC search for the max of p(w) is in
MarkovChainMonteCarloNBP::productThread (things between
MarkovChainMonteCarloNBP::product and
MarkovChainMonteCarloNBP::productThread on the call stack are taking
care of multi-threading)

