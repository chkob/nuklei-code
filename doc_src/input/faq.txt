// (C) Copyright Renaud Detry       2007-2011.

namespace nuklei {

/**

@defgroup faq F.A.Q.

@section faq_thread_safe Is Nuklei thread-safe?

@subsection faq_thread_safe_short Short Answer

There is no access synchronization in Nuklei methods. An object that is modified by one thread should therefore never be accessed by a concurrent thread.

However, Nuklei can be used in multiple threads, as long as objects are not read-modified by multiple threads concurrently.

If you are using multiple threads to decrease computation time, use OpenMP, not pthreads. Using pthreads will not significantly speed up your program.

@subsection faq_thread_safe_long Longer Answer

Nuklei classes do not protect their data members from concurrent access. As a result, an object that is modified by one thread should never be accessed by a concurrent thread.

Nuklei does make use of global variables. Global variables are used to reference the random number generators that are called in the methods of the Random class. Nuklei serializes access to the global random generators via mutexes. Therefore, it is safe to run Nuklei code in concurrent threads (provided that the data access constraint above is respected).

Unfortunately, random numbers are called <em>a lot</em> in Nuklei applications, and protecting the generators with mutexes slows multithreaded applications dramatically (on a 16-core processor, running 16 threads concurrently takes five times longer than running only one of those threads alone). For this reason, Random sets up a vector of random generators, and it allows <em>OpenMP</em> threads to each access a different generator. The index of the generator that a thread uses is given by <tt>omp_get_thread_num()</tt>. The vector of generators is initialized when the program starts, before <tt>main()</tt> is called, and its size is set to the value returned by <tt>omp_get_max_threads()</tt>. A vector of mutexes still serializes access to these generators. These mutexes should however never block in OpenMP threads, as long as there is only a single pool of threads active at any time, or, in other words, as long as no two threads has the same <tt>omp_get_thread_num()</tt>. Naturally, the pool size should not be increased during the course of the program. Posix threads will all use the same generator, and wait at its mutex if necessary. As a result, pthread MT will be much slower than OpenMP MT.

The class @ref parallelizer implements several parallelization schemes including OpenMP, pthread, and fork.

<a href="http://renaud-detry.net">Contact me</a> if you want to discuss this issue further. I've been working on multithreading Nuklei for a while and I might be able to help you.


<!--
-# If Nuklei is compiled with
@verbatim
./scons.py use_openmp=no
@endverbatim
  then Nuklei objects can be created in multiple threads, as long as an object that is modified by one thread is never accessed by a concurrent thread. However, <b>there will be no speed gain by using multiple threads</b>. Splitting a task in @f$ n @f$ chunks and running them in @f$ n @f$ threads will take almost the same wall time as running the @f$ n @f$ chunks successively in a single thread.

-# If Nuklei is compiled with the default config
@verbatim
./scons.py use_openmp=yes
@endverbatim
  then Nuklei objects can be created in multiple <b>OpenMP</b> threads, as long as an object that is modified by one thread is never accessed by a concurrent thread, and as long as <tt>omp_get_thread_num()</tt> returns a different value in concurrent threads, and that value belongs to @f$ [ 0, n [ @f$, where @f$ n @f$ is equal to the value that <tt>omp_get_max_threads()</tt> would return if it was called before main() (see below for more explanations). In this case, there will be a speed gain.



-->
@section faq_quaternion_norm What can I do if Nuklei quits and complains that FastNegExp is not correctly used?

For instance, what if I get the following error:
@code
libnuklei/base/nuklei/Math.h:72: T nuklei::FastNegExp(T) [with T = double]:
Assertion `0-1e-6 < fValue' failed
@endcode

Short answer: Try normalizing all the quaternions you give to Nuklei:

@code
double qw = ..., qx = ..., qy = ..., qz = ...; // Values produced by non-Nuklei code.
kernel::se3 k;
k.ori_.W() = qw;
k.ori_.X() = qx;
k.ori_.Y() = qy;
k.ori_.Z() = qz;
k.ori_ = la::normalized(k.ori_); // Make sure to have unit quaternions
@endcode

Long answer:

Nuklei expects that the data it receives is well-formed to an error of 1e-6. Providing Nuklei with a unit quaternion, or unit vector, whose norm is larger/smaller than 1 by more than 1e-6 will trigger exceptions at various places in the code.

When operating on quaternions, their value may drift away from normality. At places where it can afford it, Nuklei performs re-normalization of its data. Where it cannot, it checks that the data is ok. If not, it quits. Even though this behavior can appear quite strict, it often helps finding bugs. I have thus decided to leave it as is for the moment.

*/

}
